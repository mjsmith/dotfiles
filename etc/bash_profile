### Michael Smith's .bash_profile
##

STARTUP="in progress"

### Certain Usefulness
##
# Certain Checking of Interactivity
alias is_interact='[ -n "$PS1" ]'
alias is_batch='[ -z "$PS1" ]'

# Certain Darwinism Linuxified
if [ "$(uname)" == 'Darwin' ]; then
  is_darwin=1
  alias ls='ls -kG'  # KiB, Color
  alias dir='ls -Fx' # Type marker, across.
  alias psf='ps -ax'
  alias free='vm_stat' # Who knows a better substitute for free(1)?
  alias pstree='pstree -g2 -w'
  alias mat='open *.tmproj'
else
  is_darwin=
  alias ls='ls --color=auto'
  # GNU dir is /bin/dir, so no alias.
  alias psf='ps -fax'
  alias pstree='pstree -Uul'
fi

# Certain Shorthands
alias l='ls -l'
alias ll='ls -al'
alias lsdirs='ll | grep "^d"'
alias lsd='l | grep "^d"'
alias ls.='ll | grep " \..*$"'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias df='df -h'
alias du='du -k'
alias x='emacsclient'
alias clean='rm -f *~ #*#'
alias grep='GREP_COLOR="1;37;41" LANG=C grep --color=auto'

# Matlab-like searching of history
bind '"\e[B": history-search-forward'
bind '"\e[A": history-search-backward'

# Certain Remote Shelling
function R() {
  [ "$1" == "R" ] && local ruser=root@ && shift  # You don't do this. Use sudo, like remote="$remote sudo bash --login".
  if [ -z "$1" ]; then
    echo 'Usage: R [R] [user@]host' >&2
  else
    local remote=$*
    ssh -C $ruser$remote
  fi
}
alias RR='R R'


### Certain Environmental Concerns
##
#
TTY=$(basename $(tty))
[ -n "$is_darwin" ] && TTY=${TTY:3}
export TTY

[ -n "$is_darwin" ] && export VISUAL="mate -w"
export EDITOR=nano
export PAGER=less
export LESS="-riMSx4 -FX"

# Certain Locals on the Path
# append_path + prepend_path are copied from Fink (http://fink.sf.net) 
#      Copyright (c) 2001 Christoph Pfisterer / Copyright (c) 2001-2004 The Fink Team

# define append_path and prepend_path to add directory paths, e.g. PATH, MANPATH.
# add to end of path
append_path() {
  if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ; then
    eval "$1=\$$1:$2"
  fi
}

# add to front of path
prepend_path() {
  if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ; then
    eval "$1=$2:\$$1"
  fi
}

if [ -n "$is_darwin" ]; then
  for d in /usr/local /opt/ /opt/local; do
    [ -d $d/bin ] && prepend_path PATH $d/bin
  done
fi

for d in /opt/local/share; do
  [ -d $d/man ] && prepend_path MANPATH $d/man
done


# Certain Shorthands of Folders
#for d in ~/lib ~/Sites ~/Documents; do
#  [ -d $d ] && append_path CDPATH $d
#done
#export CDPATH

#shopt -s cdable_vars cdspell

# Certain Manly Colours
# From http://zoetrope.speakermouth.com/2008/8/18/colored-man-pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Certain Colour Abundance
white='\[\033[0m\]'
blue='\[\033[1;34m\]'
lightblue='\[\033[0;34m\]'
red='\[\033[1;31m\]'
lightred='\[\033[0;31m\]'
yellow='\[\033[1;33m\]'
lightyellow='\[\033[0;33m\]'
green='\[\033[1;32m\]'

### Certain Separatisms of History, either per Distinct Places or per Parallel Time
##
function local_history() {
  HISTARCHIVE=$HOME/.bash_histories
  [ -d "$HISTARCHIVE" ] || mkdir $HISTARCHIVE
  [ -z "$1" ] && history -w
  HISTLOG=$HISTARCHIVE/log
  HISTFILE="$HISTARCHIVE$PWD/bash_history"
  HISTMODE=local
  [ "$1" == "init" ] && return
  history -c
  history -r  
}
function session_history() {
  HISTFILE=${HOME}.bash_history_${TTY}
  HISTMODE=session
}
${HISTMODE:-local}_history init

# Certain Limits of Historical Knowledge, Ignoring Emptyness as well as Duplication
HISTSIZE=2000
HISTFILESIZE=10000
HISTCONTROL=ignoreboth

# Certain Selectivity of Historical Remembrance
# Matching commands (like those prepended by a space, the final pattern) are immediately forgotten.
HISTIGNORE="\::[bf]g:exit:w:top:psf:lsd:dir:dirs:[pc]d:cd..:cd-:..:...:pushd:popd:R:RR:[ 	]*" 

export HISTFILE HISTFILESIZE HISTSIZE HISTCONTROL HISTARCHIVE HISTLOG
shopt -s histappend histverify histreedit

# Certain History Researchability Providers
alias History="cat $HISTLOG"
function hist() {
  [ -n "$1" ] && lines="-n $1"
  tail $lines $HISTLOG
}

alias whist="cat $HISTLOG"

# Certain History Schizophrenia Automation
function diverting_history() {
  # Save history, then change directory, then load history.
  # TODO: Merge history of multiple sessions in the same directory.
  #       Currently last save wins and overwrites other session's history.
  #       Perhaps know about other sessions and show where they are?
  cmd=$1
  [ -z "$cmd" ] && echo -e "Usage: diverting_history command directory\n\ncommand = cd, pushd, popd\n" && return
  shift
  params="$*"
  if [ "$HISTMODE" = "local" ]; then
    # don't save empty history on startup.
    if [ "$STARTUP" == "in progress" ]; then
      unset STARTUP
    else
      history -w
    fi

    if [ -z "$params" ]; then
      # Even if $params is empty, passing "" to $cmd might be bad: `pushd ""` == `pushd -0` 
      $cmd
    else
      $cmd "$params"
    fi

    if [ "$OLDPWD" != "$PWD" ]; then
      local HISTDIR="$HISTARCHIVE$PWD" # using nested folders for history. 
      [ -d "$HISTDIR" ] || mkdir -p "$HISTDIR"
      export HISTFILE="$HISTDIR/bash_history" 
      history -c
      history -r
    else
      return
    fi
  else
    # Behave transparently.
    if [ -z "$params" ]; then
      $cmd
    else
      $cmd "$params"
    fi
  fi
}

function cd_and_remember() {
  # Emulate cd, but actually use pushd: let's have breadcrumbs in the shell.
  # And it can switch history as well. 
  [ "$1" == '--help' -o "$1" == '-h' ] && help pushd
  if [ -z "$1" ]; then
    target=~
  else
    [ "$1" == "." ] && return
    target="$*"
  fi
  diverting_history pushd "$target"
}

function popd_and_remember() {
  [ "$1" == '--help' -o "$1" == '-h' ] && help popd
  diverting_history popd "$@"
}

# There and back again.
alias cd='cd_and_remember'
alias pd='popd_and_remember'
alias cd-='popd_and_remember'


###  Certain Permanentizing of Sessions
##
# For new shells to drop right into place, just call saveplace while still there.
# TODO: Should we keep the whole dirstack, not just the last place?
export SAVE_SESSION=on
export SAVED_PLACE=$HISTARCHIVE/place_for_$TTY

function saveplace() {
  [ ! -f $SAVED_PLACE ] && local um=$(umask -p) && umask 0077 && touch $SAVED_PLACE && `$um`
  [ "$1" == "on" ] && chmod u+x $SAVED_PLACE && return
  [ "$1" == "off" ] && chmod -x $SAVED_PLACE && return
  [ "$1" == "go" ] && source $SAVED_PLACE && return 
  [ $HOME != "$PWD" ] && echo cd \"$PWD\" > $SAVED_PLACE && chmod u+x $SAVED_PLACE && return
  # Going home means to switch it off..
  [ "$1" == "-f" -a $HOME == "$PWD" ] && chmod -x $SAVED_PLACE
}
alias dropplaces='chmod `dirname $SAVED_PLACE`/place_for_*'
function showplaces() {
  for f in `dirname $SAVED_PLACE`/place_for_*; do
    [ ! -s $f ] && continue
    if [ -x $f ]; then
      echo -n "[*] "
    else 
      echo -n "    "
    fi
    echo -n $(basename $f | tr _ \ )": "
    awk "{print \$2;}" $f
  done
}


# Certain Informative Prompting
function setprompt() {
  export PS1="$lightblue\u@\h$white[\t]$blue\!$white${git_prompt_info} $blue\w $red"'${EXIT/0/}'"$white\$ "
}

if [ "`id -u`" -eq 0 ]; then
  # Certain Rooty Redness
  export PS1="$red\u@\H:\w$white [$?]\$ "
else
  # Certain Blueface Promptness
  setprompt
fi

### Certain Prompt Bookkeeping and Chatterisms
##
# To show TO DO or README files upon changing into a new directory
function prompt_callback () {
  EXIT=$?
  # Bookkeeping: track commands by shell, user, directory with command number and timestamp.
  echo $(printf "%5d %-10s %s " $$ $USER "$PWD") "$(HISTTIMEFORMAT='%FT%T ' history 1)" >> $HISTLOG

  # Display useful things on arrival in a new place. But only once, of course.
  if [ "$OLDPWD" != "$PWD" ]; then
    if [ "$PWD" != "$CALLED" ]; then
      [ "$SAVE_SESSION" == "on" ] && saveplace -f
      if [ -z "$SILENT" ]; then
        if [ -r ./TODO ]; then 
          cat TODO
        else
	  [ -r ./README ] && cat README
        fi
      else
        [ "$SILENT" == "next" ] && unset SILENT
      fi
      CALLED="$PWD"
    fi
  fi
  git_prompt_info=$(git_prompt_info)
  setprompt
  true
}
export PROMPT_COMMAND=prompt_callback

# Certain Enabling of a Silent Welcome
function silently() {
  export SILENT="next"
  "$*"
}
[ $SHLVL -gt 1 ] && export SILENT="I'm a shy subshell."

# Certain Barking at Trees
function prompt_git_branch() {
  local BRANCH=$(git branch 2>/dev/null)
  if [ -n "$BRANCH" ]; then 
    BRANCH=$(echo "$BRANCH" | grep '^*')
    BRANCH="(${BRANCH:2})"
  else
    BRANCH=''
  fi
  echo "$BRANCH"
}

# AUTHOR: Geoffrey Grosenbach http://peepcode.com, from http://pastie.org/325104
# Extended to give zero or more different symbols as per git status.

# Get the name of the branch we are on
function git_prompt_info() {
  # branch_prompt=$(__git_ps1)   ## this we get by port install git +bash_completion
  branch_prompt=$(prompt_git_branch)
  if [ -n "$branch_prompt" ]; then
    status_icon=$(git_status)
    echo "$branch_prompt$status_icon"
  fi
}
# Show character if changes are pending
function git_status() {
  current_git_status=$(git status | egrep '^# [A-Z]' 2> /dev/null)
  tag=""
  case "$current_git_status" in
    *Changes\ to\ be\ committed*) tag="$tag$lightyellow ⬅" ;; 
  esac
  case "$current_git_status" in
    *Your\ branch\ is\ ahead*)    tag="$tag$green ⬆" ;;
  esac
  case "$current_git_status" in
    *Changed\ but\ not\ updated*) tag="$tag$red ♺" ;;
  esac
  case "$current_git_status" in
    *Untracked\ files*)           tag="$tag$red ★" ;;
  esac
  #if current_git_status=$(git status | grep 'added to commit' 2> /dev/null); then
  #  echo "♺"
  #fi
  echo "$tag$white"
}


### Certain Obeying to Environmental Summons
## a.k.a. Exec'ing immediately
#
if [ -n "$EXEC_IMMEDIATELY" ]; then
  exec $EXEC_IMMEDIATELY
fi


### Certain Direct Directory Hopping
## a.k.a Session Restoring
# 
if [ -x $SAVED_PLACE -a "$SAVE_SESSION" == "on" ]; then
  source $SAVED_PLACE >/dev/null
else
  unset STARTUP
fi

### Certainly Enough Now
